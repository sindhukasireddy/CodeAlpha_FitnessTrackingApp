{"ast":null,"code":"import _objectSpread from \"C:/Users/HARIKA/Downloads/FitClub-master/FitClub-master/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"C:/Users/HARIKA/Downloads/FitClub-master/FitClub-master/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"onUpdate\", \"onComplete\"];\nimport { sync } from '../../frameloop/index.mjs';\nimport { animateValue } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nvar acceleratedValues = new Set([\"opacity\", \"clipPath\", \"filter\", \"transform\", \"backgroundColor\"]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nvar sampleDelta = 10; //ms\nvar requiresPregeneratedKeyframes = function requiresPregeneratedKeyframes(valueName, options) {\n  return options.type === \"spring\" || valueName === \"backgroundColor\" || !isWaapiSupportedEasing(options.ease);\n};\nfunction createAcceleratedAnimation(value, valueName, _ref) {\n  var onUpdate = _ref.onUpdate,\n    onComplete = _ref.onComplete,\n    options = _objectWithoutProperties(_ref, _excluded);\n  var canAccelerateAnimation = supports.waapi() && acceleratedValues.has(valueName) && !options.repeatDelay && options.repeatType !== \"mirror\" && options.damping !== 0;\n  if (!canAccelerateAnimation) return false;\n  var keyframes = options.keyframes,\n    _options$duration = options.duration,\n    duration = _options$duration === void 0 ? 300 : _options$duration,\n    _options$elapsed = options.elapsed,\n    elapsed = _options$elapsed === void 0 ? 0 : _options$elapsed,\n    ease = options.ease;\n  /**\n   * If this animation needs pre-generated keyframes then generate.\n   */\n  if (requiresPregeneratedKeyframes(valueName, options)) {\n    var sampleAnimation = animateValue(_objectSpread(_objectSpread({}, options), {}, {\n      repeat: 0,\n      elapsed: 0\n    }));\n    var state = {\n      done: false,\n      value: keyframes[0]\n    };\n    var pregeneratedKeyframes = [];\n    /**\n     * Bail after 20 seconds of pre-generated keyframes as it's likely\n     * we're heading for an infinite loop.\n     */\n    var t = 0;\n    while (!state.done && t < 20000) {\n      state = sampleAnimation.sample(t, true);\n      pregeneratedKeyframes.push(state.value);\n      t += sampleDelta;\n    }\n    keyframes = pregeneratedKeyframes;\n    duration = t - sampleDelta;\n    ease = \"linear\";\n  }\n  var animation = animateStyle(value.owner.current, valueName, keyframes, _objectSpread(_objectSpread({}, options), {}, {\n    delay: -elapsed,\n    duration: duration,\n    /**\n     * This function is currently not called if ease is provided\n     * as a function so the cast is safe.\n     *\n     * However it would be possible for a future refinement to port\n     * in easing pregeneration from Motion One for browsers that\n     * support the upcoming `linear()` easing function.\n     */\n    ease: ease\n  }));\n  /**\n   * Prefer the `onfinish` prop as it's more widely supported than\n   * the `finished` promise.\n   *\n   * Here, we synchronously set the provided MotionValue to the end\n   * keyframe. If we didn't, when the WAAPI animation is finished it would\n   * be removed from the element which would then revert to its old styles.\n   */\n  animation.onfinish = function () {\n    value.set(getFinalKeyframe(keyframes, options));\n    sync.update(function () {\n      return animation.cancel();\n    });\n    onComplete && onComplete();\n  };\n  /**\n   * Animation interrupt callback.\n   */\n  return {\n    get currentTime() {\n      return animation.currentTime || 0;\n    },\n    set currentTime(t) {\n      animation.currentTime = t;\n    },\n    stop: function stop() {\n      /**\n       * WAAPI doesn't natively have any interruption capabilities.\n       *\n       * Rather than read commited styles back out of the DOM, we can\n       * create a renderless JS animation and sample it twice to calculate\n       * its current value, \"previous\" value, and therefore allow\n       * Motion to calculate velocity for any subsequent animation.\n       */\n      var currentTime = animation.currentTime;\n      if (currentTime) {\n        var _sampleAnimation = animateValue(_objectSpread(_objectSpread({}, options), {}, {\n          autoplay: false\n        }));\n        value.setWithVelocity(_sampleAnimation.sample(currentTime - sampleDelta).value, _sampleAnimation.sample(currentTime).value, sampleDelta);\n      }\n      sync.update(function () {\n        return animation.cancel();\n      });\n    }\n  };\n}\nexport { createAcceleratedAnimation };","map":{"version":3,"names":["sync","animateValue","animateStyle","isWaapiSupportedEasing","supports","getFinalKeyframe","acceleratedValues","Set","sampleDelta","requiresPregeneratedKeyframes","valueName","options","type","ease","createAcceleratedAnimation","value","_ref","onUpdate","onComplete","_objectWithoutProperties","_excluded","canAccelerateAnimation","waapi","has","repeatDelay","repeatType","damping","keyframes","_options$duration","duration","_options$elapsed","elapsed","sampleAnimation","_objectSpread","repeat","state","done","pregeneratedKeyframes","t","sample","push","animation","owner","current","delay","onfinish","set","update","cancel","currentTime","stop","autoplay","setWithVelocity"],"sources":["C:/Users/HARIKA/Downloads/FitClub-master/FitClub-master/node_modules/framer-motion/dist/es/animation/waapi/create-accelerated-animation.mjs"],"sourcesContent":["import { sync } from '../../frameloop/index.mjs';\nimport { animateValue } from '../legacy-popmotion/index.mjs';\nimport { animateStyle } from './index.mjs';\nimport { isWaapiSupportedEasing } from './easing.mjs';\nimport { supports } from './supports.mjs';\nimport { getFinalKeyframe } from './utils/get-final-keyframe.mjs';\n\n/**\n * A list of values that can be hardware-accelerated.\n */\nconst acceleratedValues = new Set([\n    \"opacity\",\n    \"clipPath\",\n    \"filter\",\n    \"transform\",\n    \"backgroundColor\",\n]);\n/**\n * 10ms is chosen here as it strikes a balance between smooth\n * results (more than one keyframe per frame at 60fps) and\n * keyframe quantity.\n */\nconst sampleDelta = 10; //ms\nconst requiresPregeneratedKeyframes = (valueName, options) => options.type === \"spring\" ||\n    valueName === \"backgroundColor\" ||\n    !isWaapiSupportedEasing(options.ease);\nfunction createAcceleratedAnimation(value, valueName, { onUpdate, onComplete, ...options }) {\n    const canAccelerateAnimation = supports.waapi() &&\n        acceleratedValues.has(valueName) &&\n        !options.repeatDelay &&\n        options.repeatType !== \"mirror\" &&\n        options.damping !== 0;\n    if (!canAccelerateAnimation)\n        return false;\n    let { keyframes, duration = 300, elapsed = 0, ease } = options;\n    /**\n     * If this animation needs pre-generated keyframes then generate.\n     */\n    if (requiresPregeneratedKeyframes(valueName, options)) {\n        const sampleAnimation = animateValue({\n            ...options,\n            repeat: 0,\n            elapsed: 0,\n        });\n        let state = { done: false, value: keyframes[0] };\n        const pregeneratedKeyframes = [];\n        /**\n         * Bail after 20 seconds of pre-generated keyframes as it's likely\n         * we're heading for an infinite loop.\n         */\n        let t = 0;\n        while (!state.done && t < 20000) {\n            state = sampleAnimation.sample(t, true);\n            pregeneratedKeyframes.push(state.value);\n            t += sampleDelta;\n        }\n        keyframes = pregeneratedKeyframes;\n        duration = t - sampleDelta;\n        ease = \"linear\";\n    }\n    const animation = animateStyle(value.owner.current, valueName, keyframes, {\n        ...options,\n        delay: -elapsed,\n        duration,\n        /**\n         * This function is currently not called if ease is provided\n         * as a function so the cast is safe.\n         *\n         * However it would be possible for a future refinement to port\n         * in easing pregeneration from Motion One for browsers that\n         * support the upcoming `linear()` easing function.\n         */\n        ease: ease,\n    });\n    /**\n     * Prefer the `onfinish` prop as it's more widely supported than\n     * the `finished` promise.\n     *\n     * Here, we synchronously set the provided MotionValue to the end\n     * keyframe. If we didn't, when the WAAPI animation is finished it would\n     * be removed from the element which would then revert to its old styles.\n     */\n    animation.onfinish = () => {\n        value.set(getFinalKeyframe(keyframes, options));\n        sync.update(() => animation.cancel());\n        onComplete && onComplete();\n    };\n    /**\n     * Animation interrupt callback.\n     */\n    return {\n        get currentTime() {\n            return animation.currentTime || 0;\n        },\n        set currentTime(t) {\n            animation.currentTime = t;\n        },\n        stop: () => {\n            /**\n             * WAAPI doesn't natively have any interruption capabilities.\n             *\n             * Rather than read commited styles back out of the DOM, we can\n             * create a renderless JS animation and sample it twice to calculate\n             * its current value, \"previous\" value, and therefore allow\n             * Motion to calculate velocity for any subsequent animation.\n             */\n            const { currentTime } = animation;\n            if (currentTime) {\n                const sampleAnimation = animateValue({\n                    ...options,\n                    autoplay: false,\n                });\n                value.setWithVelocity(sampleAnimation.sample(currentTime - sampleDelta).value, sampleAnimation.sample(currentTime).value, sampleDelta);\n            }\n            sync.update(() => animation.cancel());\n        },\n    };\n}\n\nexport { createAcceleratedAnimation };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}